#include <iostream>
#include <stdio.h>
#include <mpi.h>

int main(int argc, char* argv[])
{
    MPI_Status status;
    int start = 2;
    int end = 100000;
    const int num = end - start + 1;

    int prims[num];

    int num_cores;
    int core_id;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &core_id);
    MPI_Comm_size(MPI_COMM_WORLD, &num_cores);

    for(int i = start; i <= end; i++){
        if(i % num_cores != core_id)
        {
            prims[i] = 0;
            continue;
        }
        int num = 0;
        for(int j = 1; j <= i; j++)
        {
            if(i % j == 0)
                num ++;
            
        }
        if(num == 2)
            prims[i] = i;
        else
            prims[i] = 0;
    }
    if(core_id != 0)
        MPI_Send(prims, num, MPI_INT, 0, 99, MPI_COMM_WORLD);

    if(core_id == 0){
        FILE *fp = NULL;
        fp = fopen("3_mpi.txt", "w");
        int prim_num = 0;

        int get_prims[num];
        for(int source = 0; source < num_cores; source++){
            if(source != 0){
                MPI_Recv(get_prims, num, MPI_INT, source, 99, MPI_COMM_WORLD, &status);
                for(int i = 0; i < num; i++){
                    if(get_prims[i] != 0){
                        prim_num ++;
                        fprintf(fp, "%d\n", get_prims[i]);
                    }
                }
            }
            else{
                for(int i = 0; i < num; i++){
                    if(prims[i] != 0){
                        prim_num ++;
                        fprintf(fp, "%d\n", prims[i]);
                    }
                }
            }

        }
        fclose(fp);
        std::cout << "sum =ï¼š" << prim_num << std::endl;
    }
    MPI_Finalize();

    return 0;
}
